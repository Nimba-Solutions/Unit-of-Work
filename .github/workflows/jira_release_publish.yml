name: Jira - Update Release

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Jira Release Name (e.g., Current Release)'
        required: true
        type: string
      project_key:
        description: 'Jira Project Key (e.g., CAM)'
        required: true
        type: string

jobs:
  update-release-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to ensure tags are available

      - name: Get Latest Tag
        id: latest-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          if [ -z "$LATEST_TAG" ]; then
            echo "Error: No tags found in the repository."
            exit 1
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Get Jira Release ID by Name
        id: get-release-id
        run: |
          RESPONSE=$(curl --http1.1 -X GET \
            -H "Authorization: Basic ${{ secrets.JIRA_AUTH }}" \
            -H "Content-Type: application/json" \
            "https://gobrio.atlassian.net/rest/api/2/project/${{ inputs.project_key }}/versions")
          RELEASE_ID=$(echo "$RESPONSE" | jq -r --arg RELEASE_NAME "${{ inputs.release_name }}" '.[] | select(.name==$RELEASE_NAME) | .id')
          if [ -z "$RELEASE_ID" ]; then
            echo "Error: Release ID not found for release name '${{ inputs.release_name }}'. Response: $RESPONSE"
            exit 1
          fi
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

      - name: Update Jira Release Status and Name
        run: |
          curl --http1.1 -X PUT \
            -H "Authorization: Basic ${{ secrets.JIRA_AUTH }}" \
            -H "Content-Type: application/json" \
            "https://gobrio.atlassian.net/rest/api/2/version/${{ steps.get-release-id.outputs.release_id }}" \
            --data-raw "{
              \"released\": true,
              \"name\": \"${{ steps.latest-tag.outputs.latest_tag }}\"
            }"
